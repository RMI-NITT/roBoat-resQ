#include<avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include<avr/interrupt.h>
unsigned char ch,ch1;
char quotient[9], remainder[9];
int IMUval[9];
int soundraw,soundthresh=0,persistence=0;
void adc_init()
{
    ADMUX = (1<<REFS0);
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

uint16_t adc_read(uint8_t ch)
{
  uint16_t adc;
  ch &= 0b00000111;
  ADMUX = (ADMUX & 0xF8)|ch;
  ADCSRA |= (1<<ADSC);
  while(ADCSRA & (1<<ADSC));
  adc=ADC;
   ADMUX = (ADMUX & 0b11111000);
  return (adc);
}
void UART_init1()
{
  UBRR1L = 0x67;
  UCSR1B |= (1<<TXEN1) | (1<<RXEN1);
  UCSR1A = 0x00;
}
void UART_receive1()
{
  while(UCSR1A != (UCSR1A|(1<<RXC1)));
  ch1 = UDR1;
}

void timer0init(){
  TCCR0A|=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1)|(1<<COM0B1);
  TCCR0B|=(1<<CS01);
  TIMSK0|=(1<<OCIE0A)|(1<<OCIE0B);
}
void timer1init()
{
  TCCR1B |= (1<<WGM12) | (1<<CS11)|(1<<CS10);//Prescalar 64
  TIMSK1 |=(1<<OCIE1A);
  OCR1A=1249;
}

void setduty(int l,int r){
  OCR0A=(255*l)/100;
  OCR0B=(255*r)/100;
}
void usart_init(void)
 { UCSR0B=(1<< RXEN0)|(1<< TXEN0);
UCSR0C=(1<<UCSZ01)|(1<<UCSZ00) ;
UBRR0L= 0x67 ; //BAUD RATE 9600
UCSR0A= 0x00;
}
void IMUvalues()
{
   UART_receive1();
   if(ch1=='s')
   {
    for(int i=0;i<9;i++)
    {
      UART_receive1();
      quotient[i] = ch1;
      UART_receive1();
      remainder[i] = ch1;
    }
    while(ch1!='e') UART_receive1();
   }
   for(int i=0;i<9;i++)
   {
    IMUval[i] = ((quotient[i]-128)*256) + remainder[i]-128;
    //UART_send(IMUval[i]);
   }
}
 void usart_send(int ch )

{
 while(UCSR0A!=(UCSR0A|(1<< UDRE0)));
 UDR0= ch;
}

char usart_recieve(){
 while(UCSR0A!= (UCSR0A|(1<<RXC0)));
 ch=UDR0;
 return ch;
}
void ff(){
  PORTA=(1<<0)|(1<<3);
  setduty(100,100);
}
void fb(){
  PORTA=(1<<1)|(1<<2);
  setduty(100,100);
}
void fs(){
  PORTA=PORTA & 0b11110000;
}
void pr(){
  PORTA=(1<<1)|(1<<3);
}
void pl(){
  PORTA=(1<<0)|(1<<2);
}
int main(){
  DDRB|=(1<<PB7);
  DDRG|=(1<<PG5);
  DDRC|=(1<<PC1);
  adc_init();
  UART_init1();
  timer0init();
  timer1init();
  DDRA=0xFF;
  //usart_init();
  sei();
  while(1){
    IMUvalues();
    //usart_recieve();
    if(ch=='8')
    {
      ff();
    }
    else if(ch=='2')
    {
      fb();
    }
    else if(ch=='5'){
      fs();
    }
    else if(ch=='4'){
      pl();
    }
    else if(ch=='6'){
      pr();
    }
  }
  return 0;
}
ISR(TIMER1_COMPA_vect){
  soundraw =adc_read(0);
  soundraw= (1023-soundraw);
  if(soundraw>50){
    PORTC|=(1<<PC1);
  }

  else{
    PORTC=0;
  }
}
